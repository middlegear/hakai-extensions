name: Create Release

on:
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensures full history for proper tagging

      - name: Extract version from package.json
        id: version
        run: |
          NEW_VERSION=$(jq -r .version package.json)
          echo "Current version in package.json: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV

      - name: Extract latest version from CHANGELOG.md
        id: changelog_version
        run: |
          CHANGELOG_VERSION=$(awk -F '[][]' '/^## \[/{print $2; exit}' CHANGELOG.md)
          echo "Latest version in CHANGELOG.md: $CHANGELOG_VERSION"
          echo "changelog_version=$CHANGELOG_VERSION" >> $GITHUB_ENV

      - name: Update package.json if versions don't match
        run: |
          if [ "$new_version" != "$changelog_version" ]; then
            echo "Updating package.json version from $new_version to $changelog_version"
            jq --arg new_version "$changelog_version" '.version = $new_version' package.json > temp.json && mv temp.json package.json
            echo "Updated package.json version to $changelog_version"
            echo "version_bumped=true" >> $GITHUB_ENV
          else
            echo "Versions match. No update needed."
            echo "version_bumped=false" >> $GITHUB_ENV
          fi

      - name: Commit updated package.json (if version was bumped)
        if: env.version_bumped == 'true'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add package.json
          git commit -m "Bump version to $changelog_version [skip ci]"
          git push origin main

      - name: Extract release notes from CHANGELOG.md
        id: changelog
        run: |
          RELEASE_NOTES=$(awk -v version="[$changelog_version]" '/^## / {if ($2 == version) {flag=1; next} else {flag=0}} flag' CHANGELOG.md)
          echo "Release notes extracted: $RELEASE_NOTES"
          echo "release_notes<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Git Tag
        run: |
          git tag v$changelog_version
          git push origin v$changelog_version

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ env.changelog_version }}
          release_name: Release v${{ env.changelog_version }}
          body: ${{ env.release_notes }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
